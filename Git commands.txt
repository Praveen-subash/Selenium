**************************** The below commands are steps when you setup a fresh repository **********************

git config --global user.name "Praveen"
'This is used to set the username. Global is used to access from any location. Else git asks for credentials everytime gitPush is done.

git config --global user.email "spraveen879@gmail.com"
'This is used to set the email. Global is used to access from any location. Else git asks for credentials everytime gitPush is done.

git init
'This is used to create a new repository. Created .git file in the folder. Should be executed from the location where files for git push are available

git add .
'This adds the changes to the working directory
git add. and git add * are same. * does not add files starting with . Wheras git add . adds all the files

git commit -m "Pushing the changes"
'Save the changes to the working directory.A commit is kind of 'object' in git, and identifies and specifies a 'snapshot' of the branch at the time of the commit.

git commit --amend
'Rewrites the previously commited changes

git remote add origin https://github.com/Praveen-subash/gitBasicsSelenium.git
'Specifying the location of your repository. Here origin is an alias/alternate name for your remote repository so that you don't have to type the entire path for 
remote every time and henceforth you are declaring that you will use this name(origin) to refer to your remote. 

git push origin master
'Pushing the code to origin which is specified above and to the master

git log
'Used to check the push history of the code

**************************** The below commands are steps when you make changes to existing repository **********************  

git clone https://github.com/Praveen-subash/gitBasicsSelenium.git
'This takes the fresh copy from git

git status
git add .
git commit  -m "New changes"
git push origin master
'The above steps can be repeated if we are making changes.

**************************** The below commands are steps when you create a new branch **********************  

git branch developmentBranch
'This creates a new branch

git checkout developmentBranch
'This moves the control to the new branch

git branch
'This displays the existing branch we are working on

ALWAYS NOTE THAT IN THE BRANCH WHEN YOU PUSH THE CODE IT HAS ALL THE CODE OF master BRANCH AND THEN ADDS THE NEW CODE THAT YOU HAVE PUSHED TO THAT BRANCH

git add *
git commit -m "Pushing new branch code"
'This asusual

git push origin developmentBranch
'This will push the new code to developmentBranch branch

**************************** The below commands are steps to merge the existing branch **********************  

git checkout master
'ALWAYS COME TO DESTINATION BRANCH IF YOU WANT TO MERGE. This command now transfers the control to master branch.

'git pull
This would bring the latest code to the master now

git merge developmentBranch
'This will merge the developmentBranch with the master

[IT IS AT THIS PLACE CONFLICT OCCURS. WHEN THERE IS A CONFLICT, YOU CAN EITHER RESOLVE BY CREATING A PULL REQUEST OR THRO GIT BASH OR ECLIPSE]

git push origin master
'Now the merged code is pushed

NOW IF YOU CHECK BRANCH IN GIT, IT SHOWS MESSAGE 'THIS IS EVEN WITH MASTER'

git branch -d developmentBranch
'This will delete the branch from local. From git it wont get deleted

git push origin -delete "developmentBranch"
'Delete the created branch

